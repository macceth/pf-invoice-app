{"version":3,"sources":["components/Button.tsx","components/Input.tsx","components/InvoiceForm.tsx","hooks.ts","store/invoice-slice.ts","store/invoice-action.ts","components/DatePicker.tsx","components/Select.tsx","helper.ts","components/InvoiceStatus.tsx","components/InvoiceItem.tsx","components/Page.tsx","pages/Invoices.tsx","components/BottomButtonGroup.tsx","components/ItemList.tsx","components/Modal.tsx","pages/InvoiceDetail.tsx","components/SideBar.tsx","App.tsx","store/index.ts","index.tsx"],"names":["Modes","Input","props","className","name","readonly","label","onChange","type","value","optionProps","readOnly","msg","modes","Button","mode","onClick","btnClass","NewInvoice","MarkAsPaid","SaveAndSend","SaveChange","Edit","Cancel","Delete","Discard","SaveAsDraft","NewItem","Fragment","src","process","alt","useAppDispatch","useDispatch","useAppSelector","useSelector","useClickOutsideCallback","ref","callback","useEffect","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","invoiceSlice","createSlice","initialState","invoices","invoiceItem","reducers","replaceInvoices","state","action","payload","replaceInvoiceItem","invoiceActions","actions","fetchInvoicesData","dispatch","a","localData","localStorage","getItem","data","JSON","parse","axios","get","response","setItem","stringify","console","log","fetchInvoiceItemData","id","dataResult","find","item","deleteInvoiceItem","getState","currentInvoicesData","invoice","newInvoicesData","filter","error","saveEdit","map","addNewInvoice","DatePicker","setValue","useState","showDatepicker","setShowDatePicker","month","setMonth","year","setYear","blankDays","setBlankDays","numberOfDays","setNumberOfDays","useRef","isSelectedDay","date","lookingDate","moment","format","dateObj","daysInMonth","Date","getDate","dayOfWeek","getDay","blankdaysArray","i","push","daysArray","day","style","width","selectedDate","selectDate","Select","itemName","itemValue","items","openDropDown","setOpenDropDown","selectedItemIndex","isSelected","index","val","generateRandomString","length","Math","random","toString","substr","InvoiceForm","setShow","show","reload","darftId","formikRef","invoiceId","useParams","CREATE_DRAFT","invoiceStoreItem","invoiceDataItem","title","CREATE","saveData","saveMode","NewInvoiceDataItem","total","reduce","acc","paymentDue","createdAt","add","paymentTerms","saveEditToServer","toUpperCase","status","validateForm","result","setTouched","setNestedObjectValues","isValid","values","saveAndSend","saveDraft","discard","EDIT","resetForm","PAYMENT_TERMS","text","defaultValue","clientName","clientEmail","description","senderAddress","street","city","postCode","country","clientAddress","enableReinitialize","innerRef","initialValues","onSubmit","setSubmitting","validationSchema","Yup","required","email","of","quantity","positive","price","render","setFieldValue","handleChange","newVal","arrayHelpers","e","parseFloat","currentTarget","remove","btnModes","InvoiceStatus","statusText","substring","statusClass","InvoiceItem","dueDateString","path","itemUI","to","openEditDraft","Page","children","Invoices","showCreateInvoice","setShowInvoiceForm","showFilter","setshowFilter","setFilter","setDraftId","showCreateDraftInvoice","setShowInvoiceDraftForm","showAllType","filteredInvoices","includes","clickFilter","filterItem","checked","buttonModes","BottomButtonGroup","ItemList","itemList","Modal","open","setClose","info","buttonGroup","InvoiceDetail","history","useHistory","showInvoiceForm","showDeleteModal","setshowDeleteModal","editButtonGroup","createDateString","DeleteModalButtonGroup","replace","SideBar","toggleDarkModeHandler","App","localTheme","theme","setTheme","darkClass","current_theme","next_theme","exact","store","configureStore","reducer","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d8c9fe3a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ninterface ButtonProps {\r\n  mode: Modes;\r\n  className?: string;\r\n  onClick: () => void;\r\n}\r\n\r\nexport enum Modes {\r\n  NewInvoice,\r\n  MarkAsPaid,\r\n  Edit,\r\n  Delete,\r\n  Cancel,\r\n  SaveAsDraft,\r\n  Discard,\r\n  SaveAndSend,\r\n  SaveChange,\r\n  NewItem,\r\n}\r\n\r\nconst Button = ({ mode, className, onClick }: ButtonProps) => {\r\n  let btnClass = className ? className : \"\";\r\n  if (mode === Modes.NewInvoice) {\r\n    btnClass = \"bg-purple m-1 text-white rounded-3xl px-2 py-2 hover:bg-purple-light transition-color duration-100\";\r\n  } else if (mode === Modes.MarkAsPaid || mode === Modes.SaveAndSend || mode === Modes.SaveChange) {\r\n    btnClass = \"bg-purple m-1 text-white rounded-3xl px-5 py-3 hover:bg-purple-light transition-color duration-100\";\r\n  } else if (mode === Modes.Edit || mode === Modes.Cancel) {\r\n    btnClass =\r\n      \"bg-gray-100 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-800 m-1 text-gray-600 dark:text-gray-400 dark:hover:text-gray-200 rounded-3xl px-5 py-3 transition-color duration-100\";\r\n  } else if (mode === Modes.Delete) {\r\n    btnClass = \"bg-red-500 m-1 text-white rounded-3xl px-5 py-3 hover:bg-red-400 transition-color duration-100\";\r\n  } else if (mode === Modes.Discard) {\r\n    btnClass = \"bg-gray-100 m-1 text-gray-600 rounded-3xl px-5 py-3 hover:bg-gray-300 transition-color duration-100\";\r\n  } else if (mode === Modes.SaveAsDraft) {\r\n    btnClass = \"bg-app-dark-3 m-1 text-gray-400 rounded-3xl px-5 py-3 hover:bg-app-dark-2 transition-color duration-100\";\r\n  } else if (mode === Modes.NewItem) {\r\n    btnClass =\r\n      \"w-full flex justify-center items-center bg-gray-100 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-800 mt-5 text-gray-600 dark:text-gray-400 dark:hover:text-gray-200 rounded-3xl px-5 py-3 transition-color duration-100\";\r\n  }\r\n\r\n  return (\r\n    <button className={btnClass} onClick={onClick} type=\"button\">\r\n      {mode === Modes.NewInvoice && (\r\n        <React.Fragment>\r\n          <img className=\"bg-white rounded-full p-3 inline-block mr-3\" src={process.env.PUBLIC_URL + \"/assets/icon-plus.svg\"} alt=\"icon plus\" />\r\n          New Invoice\r\n        </React.Fragment>\r\n      )}\r\n      {mode === Modes.MarkAsPaid && <React.Fragment>Mark as Paid</React.Fragment>}\r\n      {mode === Modes.Edit && <React.Fragment>Edit</React.Fragment>}\r\n      {mode === Modes.Cancel && <React.Fragment>Cancel</React.Fragment>}\r\n      {mode === Modes.Delete && <React.Fragment>Delete</React.Fragment>}\r\n      {mode === Modes.Discard && <React.Fragment>Discard</React.Fragment>}\r\n      {mode === Modes.SaveAsDraft && <React.Fragment>Save as Draft</React.Fragment>}\r\n      {mode === Modes.SaveChange && <React.Fragment>Save Change</React.Fragment>}\r\n      {mode === Modes.SaveAndSend && <React.Fragment>{\"Save & Send\"}</React.Fragment>}\r\n      {mode === Modes.NewItem && (\r\n        <React.Fragment>\r\n          <img src={process.env.PUBLIC_URL + \"/assets/icon-plus.svg\"} alt=\"plus-icon\" className=\"mr-3\" />\r\n          Add New Item\r\n        </React.Fragment>\r\n      )}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import { Field, ErrorMessage } from \"formik\";\r\n\r\ninterface InputType {\r\n  name: string;\r\n  value?: string | number;\r\n  className?: string;\r\n  readonly?: boolean;\r\n  label?: string;\r\n  onChange?: (e: React.FormEvent<HTMLInputElement>) => void;\r\n  type?: string;\r\n}\r\n\r\nconst Input = (props: InputType) => {\r\n  const { className, name, readonly, label, onChange, type = \"text\", value } = props;\r\n  let optionProps: { onChange?: (e: React.FormEvent<HTMLInputElement>) => void; value?: string | number } = {};\r\n  if (onChange) optionProps.onChange = onChange;\r\n  if (value) optionProps.value = value;\r\n  return (\r\n    <div className={className ? className : \"\"}>\r\n      <label className=\"block font-normal text-gray-500 dark:text-gray-400 text-sm mt-3 mb-2\">{label}</label>\r\n      <Field\r\n        type={type}\r\n        readOnly={readonly}\r\n        name={name}\r\n        {...optionProps}\r\n        className=\"mt-1 block w-full bg-white dark:bg-app-dark-5 rounded-md \r\n        border-gray-300 dark:border-gray-800  font-bold\r\n        focus:border-purple focus:ring-1 focus:ring-purple text-gray-900 dark:text-gray-100\"\r\n      />\r\n      <ErrorMessage name={name}>{(msg) => <div className=\" text-red-500 text-sm mt-3\">{msg}</div>}</ErrorMessage>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import { useEffect, useRef } from \"react\";\r\nimport Input from \"./Input\";\r\nimport Button, { Modes as btnModes } from \"./Button\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport { fetchInvoiceItemData, saveEdit as saveEditToServer, addNewInvoice, deleteInvoiceItem } from \"../store/invoice-action\";\r\nimport type { invoiceType } from \"../models\";\r\nimport DatePicker from \"./DatePicker\";\r\nimport Select from \"./Select\";\r\nimport { generateRandomString } from \"../helper\";\r\nimport { Formik, Form, FormikHelpers, FormikProps, FieldArray, setNestedObjectValues } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport moment from \"moment\";\r\n\r\nexport enum modes {\r\n  CREATE,\r\n  EDIT,\r\n  CREATE_DRAFT,\r\n}\r\n\r\ninterface InvoiceFormProps {\r\n  setShow: (state: boolean) => void;\r\n  show: boolean;\r\n  mode: modes;\r\n  reload: () => void;\r\n  darftId?: string;\r\n}\r\n\r\nconst InvoiceForm = ({ setShow, show, mode, reload, darftId }: InvoiceFormProps) => {\r\n  const formikRef = useRef<FormikProps<invoiceType>>(null);\r\n\r\n  let { invoiceId } = useParams<{ invoiceId: string }>();\r\n  if (mode === modes.CREATE_DRAFT && darftId) invoiceId = darftId;\r\n\r\n  const invoiceStoreItem = useAppSelector((state) => state.invoice.invoiceItem);\r\n\r\n  const invoiceDataItem = invoiceId ? invoiceStoreItem : null;\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    if (invoiceId) dispatch(fetchInvoiceItemData(invoiceId));\r\n  }, [dispatch, invoiceId]);\r\n\r\n  let title = \"\";\r\n  if (mode === modes.CREATE) {\r\n    title = \"New Invoice\";\r\n  } else if (mode === modes.CREATE_DRAFT) {\r\n    title = `New Invoice (Edit Draft: #${darftId})`;\r\n  } else {\r\n    title = \"Edit #\" + invoiceId;\r\n  }\r\n\r\n  const saveData = async (saveMode: string, data: invoiceType) => {\r\n    let NewInvoiceDataItem: invoiceType = data;\r\n    NewInvoiceDataItem.total = NewInvoiceDataItem.items.reduce((acc, item) => acc + item.total, 0);\r\n    NewInvoiceDataItem.paymentDue = moment(NewInvoiceDataItem.createdAt).add(NewInvoiceDataItem.paymentTerms, \"days\").format(\"YYYY-MM-DD\");\r\n\r\n    if (saveMode === \"saveDraft\") {\r\n      if (invoiceId) {\r\n        await dispatch(saveEditToServer(invoiceId, NewInvoiceDataItem));\r\n      } else {\r\n        NewInvoiceDataItem.id = generateRandomString(6).toUpperCase();\r\n        NewInvoiceDataItem.status = \"draft\";\r\n        await dispatch(addNewInvoice(NewInvoiceDataItem));\r\n      }\r\n      reload();\r\n      setShow(false);\r\n    } else if (saveMode === \"saveAndSend\") {\r\n      if (invoiceId) {\r\n        NewInvoiceDataItem.status = \"pending\";\r\n        await dispatch(saveEditToServer(invoiceId, NewInvoiceDataItem));\r\n      } else {\r\n        NewInvoiceDataItem.id = generateRandomString(6).toUpperCase();\r\n        NewInvoiceDataItem.status = \"pending\";\r\n        await dispatch(addNewInvoice(NewInvoiceDataItem));\r\n      }\r\n      reload();\r\n      setShow(false);\r\n    } else if (saveMode === \"saveEdit\") {\r\n      await dispatch(saveEditToServer(invoiceId, NewInvoiceDataItem));\r\n      reload();\r\n      setShow(false);\r\n    }\r\n  };\r\n\r\n  const saveEdit = async () => {\r\n    if (formikRef.current) {\r\n      const result = await formikRef.current.validateForm();\r\n      await formikRef.current.setTouched(setNestedObjectValues(result, true));\r\n      if (formikRef.current.isValid) {\r\n        await saveData(\"saveEdit\", formikRef.current.values);\r\n      }\r\n    }\r\n  };\r\n\r\n  const saveAndSend = async () => {\r\n    if (formikRef.current) {\r\n      const result = await formikRef.current.validateForm();\r\n      await formikRef.current.setTouched(setNestedObjectValues(result, true));\r\n      if (formikRef.current.isValid) {\r\n        await saveData(\"saveAndSend\", formikRef.current.values);\r\n      }\r\n    }\r\n  };\r\n\r\n  const saveDraft = async () => {\r\n    if (formikRef.current) {\r\n      await formikRef.current.setTouched({});\r\n      await saveData(\"saveDraft\", formikRef.current.values);\r\n    }\r\n  };\r\n\r\n  const discard = () => {\r\n    if ((mode === modes.EDIT && invoiceDataItem) || mode === modes.CREATE) {\r\n      // reset form\r\n      if (formikRef.current) {\r\n        formikRef.current.resetForm();\r\n      }\r\n    } else if (mode === modes.CREATE_DRAFT && darftId && invoiceDataItem) {\r\n      dispatch(deleteInvoiceItem(darftId));\r\n      reload();\r\n    }\r\n    setShow(false);\r\n  };\r\n\r\n  const submitHandler = (values: invoiceType, { setSubmitting }: FormikHelpers<invoiceType>) => {\r\n    console.log(values);\r\n  };\r\n\r\n  const PAYMENT_TERMS = [\r\n    { text: \"7 days\", value: 7 },\r\n    { text: \"15 days\", value: 15 },\r\n    { text: \"30 days\", value: 30 },\r\n  ];\r\n\r\n  const defaultValue: invoiceType = {\r\n    id: invoiceDataItem ? invoiceDataItem.id : \"\",\r\n    clientName: invoiceDataItem ? invoiceDataItem.clientName : \"\",\r\n    clientEmail: invoiceDataItem ? invoiceDataItem.clientEmail : \"\",\r\n    description: invoiceDataItem ? invoiceDataItem.description : \"\",\r\n    senderAddress: {\r\n      street: invoiceDataItem ? invoiceDataItem.senderAddress.street : \"\",\r\n      city: invoiceDataItem ? invoiceDataItem.senderAddress.city : \"\",\r\n      postCode: invoiceDataItem ? invoiceDataItem.senderAddress.postCode : \"\",\r\n      country: invoiceDataItem ? invoiceDataItem.senderAddress.country : \"\",\r\n    },\r\n    clientAddress: {\r\n      street: invoiceDataItem ? invoiceDataItem.clientAddress.street : \"\",\r\n      city: invoiceDataItem ? invoiceDataItem.clientAddress.city : \"\",\r\n      postCode: invoiceDataItem ? invoiceDataItem.clientAddress.postCode : \"\",\r\n      country: invoiceDataItem ? invoiceDataItem.clientAddress.country : \"\",\r\n    },\r\n    items: invoiceDataItem ? invoiceDataItem.items : [],\r\n    createdAt: invoiceDataItem ? invoiceDataItem.createdAt : moment().format(\"YYYY-MM-DD\"),\r\n    paymentTerms: invoiceDataItem ? invoiceDataItem.paymentTerms : 0,\r\n    paymentDue: invoiceDataItem ? invoiceDataItem.paymentDue : \"\",\r\n    total: invoiceDataItem ? invoiceDataItem.total : 0,\r\n    status: invoiceDataItem ? invoiceDataItem.status : \"\",\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Formik\r\n        enableReinitialize\r\n        innerRef={formikRef}\r\n        initialValues={defaultValue}\r\n        onSubmit={submitHandler}\r\n        validationSchema={Yup.object({\r\n          clientName: Yup.string().required(\"Client name is required\"),\r\n          clientEmail: Yup.string().email(\"Invalid email address\").required(\"Client email is required\"),\r\n          description: Yup.string().required(\"Description is required\"),\r\n          senderAddress: Yup.object({\r\n            street: Yup.string().required(\"Street is required\"),\r\n            city: Yup.string().required(\"City is required\"),\r\n            postCode: Yup.string().required(\"Post code is required\"),\r\n            country: Yup.string().required(\"Country is required\"),\r\n          }),\r\n          clientAddress: Yup.object({\r\n            street: Yup.string().required(\"Street is required\"),\r\n            city: Yup.string().required(\"City is required\"),\r\n            postCode: Yup.string().required(\"Post code is required\"),\r\n            country: Yup.string().required(\"Country is required\"),\r\n          }),\r\n          items: Yup.array().of(\r\n            Yup.object({\r\n              name: Yup.string().required(\"Item name is required\"),\r\n              quantity: Yup.number().required(\"Item quantity is required\").positive(\"must not be 0\"),\r\n              price: Yup.number().required(\"Item price is required\").positive(\"must not be 0\"),\r\n            })\r\n          ),\r\n          createdAt: Yup.string().required(\"Invoice date is required\"),\r\n          paymentTerms: Yup.number().required(\"Payment terms is required\").positive(\"Payment terms is required\"),\r\n        })}\r\n        render={({ values, setFieldValue, handleChange }) => (\r\n          <Form\r\n            className={\r\n              \"fixed flex flex-col justify-between z-20 w-screen max-w-3xl top-0 h-screen transition-all translate duration-300 \" +\r\n              (show ? \" left-0\" : \" -left-full\")\r\n            }\r\n          >\r\n            <div className=\"bg-white dark:bg-app-dark-4 h-full p-8 md:rounded-r-3xl\">\r\n              <div className=\"h-full pb-32 overflow-y-scroll\">\r\n                <div className=\"mx-2\">\r\n                  <h1 className=\"font-bold text-3xl text-gray-900 dark:text-white\">{title}</h1>\r\n                  {/* ----------------------------------------- */}\r\n                  <p className=\"text-md mt-10 text-purple font-bold mx-2\">Bill From</p>\r\n                  <Input label=\"Street Address\" name=\"senderAddress.street\" />\r\n                  <div className=\"grid gap-4 grid-cols-2 sm:grid-cols-3\">\r\n                    <Input label=\"City\" name=\"senderAddress.city\" />\r\n                    <Input label=\"Post Code\" name=\"senderAddress.postCode\" />\r\n                    <Input className=\" col-span-2 sm:col-span-1\" label=\"Country\" name=\"senderAddress.country\" />\r\n                  </div>\r\n                  {/* ----------------------------------------- */}\r\n                  <p className=\"text-md mt-10 text-purple font-bold\">Bill To</p>\r\n                  <Input label=\"Client's Name\" name=\"clientName\" />\r\n                  <Input label=\"Client's Email\" name=\"clientEmail\" />\r\n                  <Input label=\"Street Address\" name=\"clientAddress.street\" />\r\n                  <div className=\"grid gap-4 grid-cols-2 sm:grid-cols-3\">\r\n                    <Input className=\"\" label=\"City\" name=\"clientAddress.city\" />\r\n                    <Input className=\"\" label=\"Post Code\" name=\"clientAddress.postCode\" />\r\n                    <Input className=\" col-span-2 sm:col-span-1\" label=\"Country\" name=\"clientAddress.country\" />\r\n                  </div>\r\n                  {/* ----------------------------------------- */}\r\n                  <div className=\"grid grid-cols-2 gap-5 mt-6\">\r\n                    <DatePicker\r\n                      className=\" col-span-1\"\r\n                      name=\"createdAt\"\r\n                      label=\"Invoice Date\"\r\n                      value={values.createdAt}\r\n                      setValue={(newVal) => {\r\n                        setFieldValue(\"createdAt\", newVal);\r\n                      }}\r\n                    />\r\n                    <Select\r\n                      label=\"Payment Terms\"\r\n                      items={PAYMENT_TERMS}\r\n                      itemName=\"text\"\r\n                      itemValue=\"value\"\r\n                      name=\"paymentTerms\"\r\n                      value={values.paymentTerms}\r\n                      setValue={(newVal) => {\r\n                        setFieldValue(\"paymentTerms\", newVal);\r\n                      }}\r\n                    />\r\n                  </div>\r\n                  <Input label=\"Project Description\" name=\"description\" />\r\n                  <h2 className=\"mt-10 text-2xl font-bold text-gray-600 dark:text-gray-400\">Item List</h2>\r\n\r\n                  <FieldArray\r\n                    name=\"items\"\r\n                    render={(arrayHelpers) => (\r\n                      <div>\r\n                        {values.items.map((item, index) => (\r\n                          <div className=\"grid grid-cols-10 gap-2\" key={index}>\r\n                            <Input className=\"col-span-4\" label=\"Name\" name={`items.${index}.name`} />\r\n                            <Input\r\n                              className=\"col-span-1\"\r\n                              label=\"Qty.\"\r\n                              name={`items.${index}.quantity`}\r\n                              type=\"number\"\r\n                              onChange={(e) => {\r\n                                handleChange(e);\r\n                                const newVal = parseFloat(e.currentTarget.value);\r\n                                setFieldValue(`items.${index}.total`, newVal * values.items[index].price);\r\n                              }}\r\n                            />\r\n                            <Input\r\n                              className=\"col-span-2\"\r\n                              label=\"Price\"\r\n                              name={`items.${index}.price`}\r\n                              type=\"number\"\r\n                              onChange={(e) => {\r\n                                handleChange(e);\r\n                                const newVal = parseFloat(e.currentTarget.value);\r\n                                setFieldValue(`items.${index}.total`, newVal * values.items[index].quantity);\r\n                              }}\r\n                            />\r\n                            <Input className=\"col-span-2\" label=\"Total\" name={`items.${index}.total`} readonly />\r\n                            <button\r\n                              type=\"button\"\r\n                              className=\"items-center mt-11 rounded-full hover:bg-red-500 w-8 h-8\"\r\n                              onClick={() => {\r\n                                arrayHelpers.remove(index);\r\n                              }}\r\n                            >\r\n                              <img src={process.env.PUBLIC_URL + \"/assets/icon-delete.svg\"} className=\"ml-2\" alt=\"icon-delete\" />\r\n                            </button>\r\n                          </div>\r\n                        ))}\r\n                        <Button mode={btnModes.NewItem} onClick={() => arrayHelpers.push({ name: \"\", price: 0, quantity: 0, total: 0 })}></Button>\r\n                      </div>\r\n                    )}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"bg-white dark:bg-app-dark-4 shadow-t-xl fixed bottom-0 w-full max-w-3xl h-24 md:rounded-br-3xl flex justify-between px-8 pt-5\">\r\n              <div>\r\n                {(mode === modes.CREATE || mode === modes.CREATE_DRAFT) && (\r\n                  <Button\r\n                    mode={btnModes.Discard}\r\n                    onClick={() => {\r\n                      discard();\r\n                    }}\r\n                  ></Button>\r\n                )}\r\n              </div>\r\n              <div>\r\n                {(mode === modes.CREATE || mode === modes.CREATE_DRAFT) && (\r\n                  <Button\r\n                    mode={btnModes.SaveAsDraft}\r\n                    onClick={() => {\r\n                      saveDraft();\r\n                    }}\r\n                  ></Button>\r\n                )}\r\n\r\n                {(mode === modes.CREATE || mode === modes.CREATE_DRAFT) && (\r\n                  <Button\r\n                    mode={btnModes.SaveAndSend}\r\n                    onClick={() => {\r\n                      saveAndSend();\r\n                    }}\r\n                  ></Button>\r\n                )}\r\n\r\n                {mode === modes.EDIT && (\r\n                  <Button\r\n                    mode={btnModes.Cancel}\r\n                    onClick={() => {\r\n                      discard();\r\n                    }}\r\n                  ></Button>\r\n                )}\r\n\r\n                {mode === modes.EDIT && (\r\n                  <Button\r\n                    mode={btnModes.SaveChange}\r\n                    onClick={() => {\r\n                      saveEdit();\r\n                    }}\r\n                  ></Button>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </Form>\r\n        )}\r\n      />\r\n      <div\r\n        onClick={() => {\r\n          setShow(false);\r\n        }}\r\n        className={\r\n          \"fixed z-10 inset-0 bg-gray-900 w-screen h-screen transition-opacity duration-300 \" +\r\n          (show ? \" opacity-60 translate-x-0 left-0 \" : \" opacity-0 -left-full\")\r\n        }\r\n      ></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InvoiceForm;\r\n","import React, { useEffect } from \"react\";\r\nimport { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport type { RootState, AppDispatch } from \"./store\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n\r\nexport const useClickOutsideCallback = (ref: React.RefObject<HTMLDivElement>, callback: () => void) => {\r\n  useEffect(() => {\r\n    function handleClickOutside(event: MouseEvent) {\r\n      if (ref !== null) {\r\n        if (ref.current && !ref.current.contains(event.target as HTMLElement)) {\r\n          callback();\r\n        }\r\n      }\r\n    }\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n    };\r\n  }, [ref, callback]);\r\n};\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { invoiceType } from \"../models\";\r\n\r\nconst initialInvoices: invoiceType[] = [];\r\n\r\nconst invoiceSlice = createSlice({\r\n  name: \"invoice\",\r\n  initialState: {\r\n    invoices: initialInvoices,\r\n    invoiceItem: null as invoiceType | null,\r\n  },\r\n  reducers: {\r\n    replaceInvoices(state, action) {\r\n      state.invoices = action.payload.invoices;\r\n    },\r\n    replaceInvoiceItem(state, action) {\r\n      state.invoiceItem = action.payload.invoiceItem;\r\n    },\r\n  },\r\n});\r\n\r\nexport const invoiceActions = invoiceSlice.actions;\r\n\r\nexport default invoiceSlice;\r\n","import { invoiceActions } from \"./invoice-slice\";\r\nimport type { AppDispatch, RootState } from \".\";\r\nimport { invoiceType } from \"../models\";\r\nimport axios from \"axios\";\r\n\r\nexport const fetchInvoicesData = () => {\r\n  return async (dispatch: AppDispatch) => {\r\n    try {\r\n      const localData = localStorage.getItem(\"data\");\r\n      if (localData) {\r\n        const data = JSON.parse(localData);\r\n        dispatch(invoiceActions.replaceInvoices({ invoices: data }));\r\n      } else {\r\n        const response = await axios.get(process.env.PUBLIC_URL + \"/assets/data.json\");\r\n        localStorage.setItem(\"data\", JSON.stringify(response.data));\r\n        dispatch(invoiceActions.replaceInvoices({ invoices: response.data }));\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n};\r\n\r\nexport const fetchInvoiceItemData = (id: string) => {\r\n  return async (dispatch: AppDispatch) => {\r\n    try {\r\n      let data: invoiceType[] | undefined;\r\n      const localData = localStorage.getItem(\"data\");\r\n      if (localData) {\r\n        data = JSON.parse(localData);\r\n      } else {\r\n        const response = await axios.get(process.env.PUBLIC_URL + \"/assets/data.json\");\r\n        data = response.data;\r\n      }\r\n      const dataResult = data ? data.find((item) => item.id === id) : null;\r\n      dispatch(invoiceActions.replaceInvoiceItem({ invoiceItem: dataResult }));\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n};\r\n\r\nexport const deleteInvoiceItem = (id: string) => {\r\n  return async (dispatch: AppDispatch, getState: () => RootState) => {\r\n    try {\r\n      const currentInvoicesData = getState().invoice.invoices;\r\n      const newInvoicesData = currentInvoicesData.filter((item) => item.id !== id);\r\n      localStorage.setItem(\"data\", JSON.stringify(newInvoicesData));\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n};\r\n\r\nexport const markAsPaid = (id: string) => {\r\n  return async (dispatch: AppDispatch, getState: () => RootState) => {\r\n    try {\r\n      const currentInvoicesData = getState().invoice.invoices;\r\n      const newInvoicesData = currentInvoicesData.map((item) => ({ ...item, status: item.id === id ? \"paid\" : item.status }));\r\n      localStorage.setItem(\"data\", JSON.stringify(newInvoicesData));\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n};\r\n\r\nexport const saveEdit = (id: string, data: invoiceType) => {\r\n  return async (dispatch: AppDispatch, getState: () => RootState) => {\r\n    try {\r\n      const currentInvoicesData = getState().invoice.invoices;\r\n      const newInvoicesData = currentInvoicesData.map((item) => {\r\n        if (item.id === id) return data;\r\n        return item;\r\n      });\r\n      localStorage.setItem(\"data\", JSON.stringify(newInvoicesData));\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n};\r\n\r\nexport const addNewInvoice = (data: invoiceType) => {\r\n  return async (dispatch: AppDispatch, getState: () => RootState) => {\r\n    try {\r\n      const currentInvoicesData = getState().invoice.invoices;\r\n      const newInvoicesData = [...currentInvoicesData, data];\r\n      localStorage.setItem(\"data\", JSON.stringify(newInvoicesData));\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n};\r\n","// Credits: https://tailwindcomponents.com/component/datepicker-with-tailwindcss-and-alpinejs\r\n\r\nimport { useState, useRef, useEffect } from \"react\";\r\nimport { useClickOutsideCallback } from \"../hooks\";\r\nimport { Field, ErrorMessage } from \"formik\";\r\nimport moment from \"moment\";\r\n\r\ninterface DatePickerProps {\r\n  label: string;\r\n  className?: string;\r\n  name: string;\r\n  value: string;\r\n  setValue: (value: string) => void;\r\n}\r\n\r\nconst DatePicker = ({ label, className = \"\", name, value, setValue }: DatePickerProps) => {\r\n  const [showDatepicker, setShowDatePicker] = useState(false);\r\n  const [month, setMonth] = useState(10);\r\n  const [year, setYear] = useState(2021);\r\n  const [blankDays, setBlankDays] = useState<number[]>([]);\r\n  const [numberOfDays, setNumberOfDays] = useState<number[]>([]);\r\n  const ref = useRef<HTMLDivElement>(null);\r\n\r\n  const MONTH_NAMES = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\r\n\r\n  useClickOutsideCallback(ref, () => {\r\n    setShowDatePicker(false);\r\n  });\r\n\r\n  const clickPrevMonth = () => {\r\n    if (month === 0) {\r\n      setMonth(11);\r\n      setYear(year - 1);\r\n    } else setMonth(month - 1);\r\n  };\r\n  const clickNextMonth = () => {\r\n    if (month === 11) {\r\n      setMonth(0);\r\n      setYear(year + 1);\r\n    } else setMonth(month + 1);\r\n  };\r\n\r\n  const isSelectedDay = (date: number) => {\r\n    const lookingDate = moment().year(year).month(month).date(date);\r\n    return value === lookingDate.format(\"YYYY-MM-DD\");\r\n  };\r\n\r\n  const selectDate = (date: number) => {\r\n    const selectedDate = moment().year(year).month(month).date(date);\r\n    setValue(selectedDate.format(\"YYYY-MM-DD\"));\r\n    setShowDatePicker(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const dateObj = moment(value, \"YYYY-MM-DD\");\r\n    setMonth(dateObj.month());\r\n    setYear(dateObj.year());\r\n  }, [value]);\r\n\r\n  useEffect(() => {\r\n    let daysInMonth = new Date(year, month + 1, 0).getDate();\r\n    let dayOfWeek = new Date(year, month).getDay();\r\n\r\n    let blankdaysArray: number[] = [];\r\n    for (let i = 1; i <= dayOfWeek; i++) {\r\n      blankdaysArray.push(i);\r\n    }\r\n\r\n    let daysArray: number[] = [];\r\n    for (let i = 1; i <= daysInMonth; i++) {\r\n      daysArray.push(i);\r\n    }\r\n\r\n    setBlankDays(blankdaysArray);\r\n    setNumberOfDays(daysArray);\r\n  }, [month, year]);\r\n\r\n  return (\r\n    <div ref={ref} className={\"relative \" + className}>\r\n      <label className=\"block font-normal text-gray-500 dark:text-gray-400 text-sm mt-3 mb-2\">{label}</label>\r\n      <Field\r\n        readOnly\r\n        name={name}\r\n        className=\"mt-1 block w-full bg-white dark:bg-app-dark-5 rounded-md \r\n        border-gray-300 dark:border-gray-800  font-bold\r\n        focus:border-purple focus:ring-1 focus:ring-purple text-gray-500 dark:text-gray-400\"\r\n        type=\"text\"\r\n        onClick={() => setShowDatePicker(true)}\r\n      />\r\n      <ErrorMessage name={name}>{(msg) => <div className=\" text-red-500 text-sm mt-3\">{msg}</div>}</ErrorMessage>\r\n      {showDatepicker && (\r\n        <div className=\"bg-white dark:bg-app-dark-3 mt-12 rounded-lg shadow p-4 absolute top-6 left-0 z-10 w-64\">\r\n          <div className=\"flex justify-between items-center mb-2\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"transition ease-in-out duration-100 inline-flex cursor-pointer hover:bg-gray-200 p-1 rounded-full\"\r\n              onClick={clickPrevMonth}\r\n            >\r\n              <img src={process.env.PUBLIC_URL + \"/assets/icon-arrow-left.svg\"} alt=\"icon-arrow-left\" className=\"p-2\" />\r\n            </button>\r\n            <div>\r\n              <span className=\"text-lg font-bold text-gray-800 dark:text-white\">\r\n                {MONTH_NAMES[month]} {year}\r\n              </span>\r\n            </div>\r\n            <button\r\n              type=\"button\"\r\n              className=\"transition ease-in-out duration-100 inline-flex cursor-pointer hover:bg-gray-200 p-1 rounded-full\"\r\n              onClick={clickNextMonth}\r\n            >\r\n              <img src={process.env.PUBLIC_URL + \"/assets/icon-arrow-right.svg\"} alt=\"icon-arrow-right\" className=\"p-2\" />\r\n            </button>\r\n          </div>\r\n\r\n          <div className=\"flex flex-wrap -mx-1\">\r\n            {blankDays.map((day) => (\r\n              <div style={{ width: \"14.26%\" }} key={day} className=\"text-center border p-1 border-transparent text-sm\"></div>\r\n            ))}\r\n\r\n            {numberOfDays.map((date) => (\r\n              <div style={{ width: \"14.26%\" }} key={date} className=\"px-1 mb-1\">\r\n                <div\r\n                  className={\r\n                    \"cursor-pointer text-center text-md font-bold text-gray-800 dark:text-white rounded-full leading-loose transition ease-in-out duration-100\" +\r\n                    (isSelectedDay(date) ? \" text-purple-light dark:text-purple-light\" : \"\")\r\n                  }\r\n                  onClick={() => {\r\n                    selectDate(date);\r\n                  }}\r\n                >\r\n                  {date}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DatePicker;\r\n","import { useState, useRef } from \"react\";\r\nimport { useClickOutsideCallback } from \"../hooks\";\r\nimport { Field, ErrorMessage } from \"formik\";\r\n\r\ninterface SelectProps {\r\n  className?: string;\r\n  label: string;\r\n  itemName: string;\r\n  itemValue: string;\r\n  items: any[];\r\n  value: any;\r\n  setValue: (value: any) => void;\r\n  name: string;\r\n}\r\nconst Select = ({ className = \"\", label, itemName, itemValue, items, value, setValue, name }: SelectProps) => {\r\n  const [openDropDown, setOpenDropDown] = useState(false);\r\n  const ref = useRef<HTMLDivElement>(null);\r\n\r\n  useClickOutsideCallback(ref, () => {\r\n    setOpenDropDown(false);\r\n  });\r\n\r\n  const onClickSelect = (val: any) => {\r\n    setValue(val);\r\n    setOpenDropDown(false);\r\n  };\r\n\r\n  const selectedItemIndex = items.find((item) => item[itemValue] === value);\r\n\r\n  const isSelected = (value: any) => {\r\n    return selectedItemIndex && selectedItemIndex[itemValue] === value;\r\n  };\r\n\r\n  return (\r\n    <div ref={ref} className={className + \" relative\"}>\r\n      <label className=\"block font-normal text-gray-500 dark:text-gray-400 text-sm mt-3 mb-2\">{label}</label>\r\n      <Field\r\n        readOnly\r\n        name={name}\r\n        className=\"mt-1 block w-full bg-white dark:bg-app-dark-5 rounded-md \r\n        border-gray-300 dark:border-gray-800  font-bold\r\n        focus:border-purple focus:ring-1 focus:ring-purple text-gray-500 dark:text-gray-400\"\r\n        type=\"text\"\r\n        onClick={() => {\r\n          setOpenDropDown(true);\r\n        }}\r\n        value={selectedItemIndex ? selectedItemIndex[itemName] : \"\"}\r\n      />\r\n      <ErrorMessage name={name}>{(msg) => <div className=\" text-red-500 text-sm mt-3\">{msg}</div>}</ErrorMessage>\r\n      {openDropDown && (\r\n        <div\r\n          className=\"bg-white min-w-full dark:bg-app-dark-3 absolute text-base z-50 py-2 list-none text-left rounded shadow-lg mt-1 \"\r\n          id=\"dropdown-example-1\"\r\n        >\r\n          {items.map((item, index) => (\r\n            <div\r\n              onClick={() => {\r\n                onClickSelect(item[itemValue]);\r\n              }}\r\n              key={index}\r\n              className={\r\n                \"text-sm py-4 dark:text-white font-bold px-4 block bg-transparent text-gray-700 hover:bg-gray-100 cursor-pointer dark:hover:bg-app-dark-4 \" +\r\n                (isSelected(item[itemValue]) ? \" text-purple-light dark:text-purple-light\" : \"\")\r\n              }\r\n            >\r\n              {item[itemName] ? item[itemName] : \"\"}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Select;\r\n","// credit: https://dev.to/oyetoket/fastest-way-to-generate-random-strings-in-javascript-2k5a\r\n\r\nexport const generateRandomString = (length: number) => {\r\n  return Math.random().toString(20).substr(2, length);\r\n};\r\n","interface InvoiceStatusProps {\r\n  status: string;\r\n  className?: string;\r\n}\r\n\r\nconst InvoiceStatus = (props: InvoiceStatusProps) => {\r\n  const statusText = props.status[0].toUpperCase() + props.status.substring(1);\r\n\r\n  let statusClass = \"text-center p-2 w-24 rounded-xl\";\r\n  if (props.status === \"paid\") statusClass += \" bg-green-500 bg-opacity-20 text-green-500\";\r\n  if (props.status === \"pending\") statusClass += \" bg-yellow-500 bg-opacity-20 text-yellow-500\";\r\n  if (props.status === \"draft\") statusClass += \" bg-gray-500 bg-opacity-20 text-gray-500\";\r\n\r\n  return (\r\n    <div className={(props.className? props.className : '')}>\r\n      <div className={statusClass}>⬤ {statusText}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InvoiceStatus;\r\n","import { Link } from \"react-router-dom\";\r\nimport moment from \"moment\";\r\nimport InvoiceStatus from \"./InvoiceStatus\";\r\nimport React from \"react\";\r\n\r\ninterface InvoiceItemProps {\r\n  id: string;\r\n  clientName: string;\r\n  paymentDue: string;\r\n  total: number;\r\n  status: string;\r\n  openEditDraft: (id: string) => void;\r\n}\r\n\r\nconst InvoiceItem = (props: InvoiceItemProps) => {\r\n  const dueDateString = moment(props.paymentDue).format(\"DD MMM YYYY\");\r\n  const path = \"/invoices/\" + (props.status === \"draft\" ? \"create/\" : \"\") + props.id;\r\n\r\n  const itemUI = (\r\n    <React.Fragment>\r\n      <div className=\"hidden md:flex bg-white hover:bg-gray-50 dark:bg-app-dark-3 dark:hover:bg-app-dark-4 rounded-md w-auto mb-5 p-7 shadow justify-between items-center\">\r\n        <div className=\"flex-1\">\r\n          <span className=\"text-purple font-bold mr-0.5 text-lg\">#</span>\r\n          <span className=\"font-bold text-gray-800 dark:text-white text-lg\">{props.id}</span>\r\n        </div>\r\n        <div className=\"flex-1.5 text-gray-500 dark:text-gray-200\">Due {dueDateString}</div>\r\n        <div className=\"flex-1.5 text-gray-500 dark:text-gray-200 bg text-left\">{props.clientName}</div>\r\n        <div className=\"flex-1 font-bold text-xl text-right text-black dark:text-gray-200\">£{props.total}</div>\r\n\r\n        <div className={\"flex-1.5 mx-2 flex items-center justify-center \"}>\r\n          <InvoiceStatus status={props.status} />\r\n          <img className=\"ml-2 w-2 h-3\" src={process.env.PUBLIC_URL + \"/assets/icon-arrow-right.svg\"} alt=\"icon-arrow-right\" />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"flex-col md:hidden bg-white hover:bg-gray-50 dark:bg-app-dark-3 dark:hover:bg-app-dark-4 rounded-md w-auto mb-5 p-7 shadow justify-between items-center\">\r\n        <div className=\"flex-1 flex items-center justify-between\">\r\n          <div>\r\n            <span className=\"text-purple font-bold mr-0.5 text-lg\">#</span>\r\n            <span className=\"font-bold text-gray-800 dark:text-white text-lg\">{props.id}</span>\r\n          </div>\r\n          <div className=\"text-gray-500 dark:text-gray-200 bg text-right\">{props.clientName}</div>\r\n        </div>\r\n        <div className=\"flex-1 flex items-center justify-between\">\r\n          <div className=\"mt-6\">\r\n            <div className=\"text-gray-500 dark:text-gray-200\">Due {dueDateString}</div>\r\n            <div className=\"text-black dark:text-gray-200 font-bold text-xl text-left\">£{props.total}</div>\r\n          </div>\r\n          <InvoiceStatus status={props.status} className=\"mx-2 mt-4\" />\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n\r\n  if (props.status !== \"draft\") return <Link to={path}>{itemUI}</Link>;\r\n  else\r\n    return (\r\n      <div className=\"cursor-pointer\" onClick={() => props.openEditDraft(props.id)}>\r\n        {itemUI}\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default InvoiceItem;\r\n","interface PageProps {\r\n  className?: string;\r\n}\r\n\r\nconst Page: React.FC<PageProps> = ({ children, className }) => {\r\n  return <div className={\"flex flex-col items-center w-screen mx-3 overflow-y-scroll pt-16 sm:pt-0 \" + (className ? className : \"\")}>{children}</div>;\r\n};\r\n\r\nexport default Page;\r\n","import InvoiceForm, { modes } from \"../components/InvoiceForm\";\r\nimport Button, { Modes as buttonModes } from \"../components/Button\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport InvoiceItem from \"../components/InvoiceItem\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport { fetchInvoicesData } from \"../store/invoice-action\";\r\nimport Page from \"../components/Page\";\r\n\r\nconst Invoices = () => {\r\n  const [showCreateInvoice, setShowInvoiceForm] = useState(false);\r\n  const [showFilter, setshowFilter] = useState(false);\r\n  const [filter, setFilter] = useState<string[]>([]);\r\n  const [darftId, setDraftId] = useState(\"\");\r\n  const [showCreateDraftInvoice, setShowInvoiceDraftForm] = useState(false);\r\n  const invoices = useAppSelector((state) => state.invoice.invoices);\r\n\r\n  const showAllType = filter.length === 0;\r\n\r\n  const filteredInvoices = showAllType ? invoices : invoices.filter((invoice) => filter.includes(invoice.status));\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchInvoicesData());\r\n  }, [dispatch]);\r\n\r\n  const reload = async () => {\r\n    dispatch(fetchInvoicesData());\r\n  };\r\n\r\n  const openEditDraft = (id: string) => {\r\n    setDraftId(id);\r\n    setShowInvoiceDraftForm(true);\r\n  };\r\n\r\n  const openNewInvoicePanel = () => {\r\n    setShowInvoiceForm(true);\r\n  };\r\n\r\n  const clickFilter = (item: string) => {\r\n    if (filter.includes(item)) setFilter(filter.filter((filterItem) => filterItem !== item));\r\n    else setFilter([...filter, item]);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <InvoiceForm mode={modes.CREATE_DRAFT} darftId={darftId} show={showCreateDraftInvoice} setShow={setShowInvoiceDraftForm} reload={reload} />\r\n      <InvoiceForm mode={modes.CREATE} show={showCreateInvoice} setShow={setShowInvoiceForm} reload={reload} />\r\n      <Page>\r\n        <div className=\"container max-w-5xl pt-10 mx-auto\">\r\n          <div className=\"flex justify-between mb-14\">\r\n            <div>\r\n              <h1 className=\"text-4xl font-bold text-gray-900 dark:text-white\">Invoices</h1>\r\n              <h3 className=\"text-sm mt-3 text-gray-600 dark:text-white\">\r\n                {filteredInvoices.length === 0 ? \"No \" : `There are ${filteredInvoices.length} `}\r\n                {showAllType && filteredInvoices.length !== 0 && \" total \"}\r\n                {filter.includes(\"paid\") && \" paid, \"}\r\n                {filter.includes(\"pending\") && \" pending, \"}\r\n                {filter.includes(\"draft\") && \" draft, \"}\r\n                Invoices\r\n              </h3>\r\n            </div>\r\n            <div className=\"flex items-center\">\r\n              {showFilter && <div className=\" bg-transparent absolute w-screen h-screen inset-0\" onClick={() => setshowFilter(false)}></div>}\r\n              <div className=\"relative\">\r\n                <button className=\"mr-5 text-gray-600 dark:text-white\" onClick={() => setshowFilter(!showFilter)}>\r\n                  Filter by status <img className=\"inline-block\" src={process.env.PUBLIC_URL + \"/assets/icon-arrow-down.svg\"} alt=\"icon-arrow-down\" />\r\n                </button>\r\n                {showFilter && (\r\n                  <div className=\"absolute w-full bg-white dark:bg-app-dark-5 rounded-sm z-10\">\r\n                    <div\r\n                      onClick={() => clickFilter(\"draft\")}\r\n                      className=\"my-2 mx-4 rounded-sm text-gray-800 dark:text-gray-200 hover:font-bold cursor-pointer\"\r\n                    >\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        className=\"appearance-none rounded-sm bg-transparent checked:bg-purple mr-2 checked:border-transparent\"\r\n                        checked={filter.includes(\"draft\")}\r\n                        onChange={() => clickFilter(\"draft\")}\r\n                      />{\" \"}\r\n                      Draft\r\n                    </div>\r\n                    <div\r\n                      onClick={() => clickFilter(\"pending\")}\r\n                      className=\"my-2 mx-4 rounded-sm text-gray-800 dark:text-gray-200 hover:font-bold cursor-pointer\"\r\n                    >\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        className=\"appearance-none rounded-sm bg-transparent checked:bg-purple mr-2 checked:border-transparent\"\r\n                        checked={filter.includes(\"pending\")}\r\n                        onChange={() => clickFilter(\"pending\")}\r\n                      />{\" \"}\r\n                      Pending\r\n                    </div>\r\n                    <div\r\n                      onClick={() => clickFilter(\"paid\")}\r\n                      className=\"my-2 mx-4 rounded-sm text-gray-800 dark:text-gray-200 hover:font-bold cursor-pointer\"\r\n                    >\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        className=\"appearance-none rounded-sm bg-transparent checked:bg-purple mr-2 checked:border-transparent\"\r\n                        checked={filter.includes(\"paid\")}\r\n                        onChange={() => clickFilter(\"paid\")}\r\n                      />{\" \"}\r\n                      Paid\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n              <Button onClick={() => openNewInvoicePanel()} mode={buttonModes.NewInvoice} />\r\n            </div>\r\n          </div>\r\n\r\n          {filteredInvoices.map((item) => (\r\n            <InvoiceItem\r\n              openEditDraft={openEditDraft}\r\n              id={item.id}\r\n              clientName={item.clientName}\r\n              paymentDue={item.paymentDue}\r\n              key={item.id}\r\n              total={item.total}\r\n              status={item.status}\r\n            />\r\n          ))}\r\n          {filteredInvoices.length === 0 && (\r\n            <div className=\"w-full h-full flex justify-center items-center\">\r\n              <div className=\"w-full max-w-lg flex flex-col justify-center items-center\">\r\n                <img\r\n                  src={process.env.PUBLIC_URL + \"/assets/illustration-empty.svg\"}\r\n                  className=\"w-full max-w-sm md:max-w-md lg:max-w-lg\"\r\n                  alt=\"no invoice\"\r\n                />\r\n                <h2 className=\"text-2xl md:text-3xl font-bold text-gray-800 dark:text-white\">There is nothing here</h2>\r\n                <h3 className=\"mt-10 text-gray-800 dark:text-white\">\r\n                  Create an invoice by clicking the <b>New</b> button and get started\r\n                </h3>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </Page>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Invoices;\r\n","const BottomButtonGroup: React.FC<{}> = ({children}) => {\r\n  return (\r\n    <div className=\"fixed left-0 bottom-0 bg-white dark:bg-app-dark-3 shadow-t-xl min-w-full flex items-center justify-end sm:hidden h-auto p-3\">\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BottomButtonGroup;\r\n","import type { invoiceItemType } from \"../models\";\r\n\r\ninterface ItemListProp {\r\n  itemList: invoiceItemType[];\r\n  total: number;\r\n}\r\n\r\nconst ItemList = ({ itemList, total }: ItemListProp) => {\r\n  return (\r\n    <div className=\"bg-app-light dark:bg-app-dark-5 mt-4 rounded-xl shadow\">\r\n      <div className=\"p-8 pb-0\">\r\n        <table className=\"w-full\">\r\n          <thead>\r\n            <tr className=\"hidden md:table-row text-gray-400\">\r\n              <th className=\"text-left font-normal\">Item Name</th>\r\n              <th className=\"font-normal\">QTY.</th>\r\n              <th className=\"text-right font-normal\">Price</th>\r\n              <th className=\"text-right font-normal\">Total</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {itemList.map((item) => (\r\n              <tr key={item.name} className=\"h-16\">\r\n                <td className=\"font-bold dark:text-white\">{item.name}</td>\r\n                <td className=\"text-center font-bold text-gray-400\">{item.quantity}</td>\r\n                <td className=\"text-right font-bold text-gray-400\">{item.price}</td>\r\n                <td className=\"text-right font-bold dark:text-white\">£{item.total}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      <div className=\" bg-app-dark-3 dark:bg-app-dark-2 p-4 px-8 text-white rounded-b-xl flex justify-between items-end\">\r\n        <span className=\"text-gray-300\">Amount Due</span>\r\n        <span className=\"font-bold text-2xl\">£{total}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ItemList;\r\n","import React from \"react\";\r\n\r\ninterface ModalProps {\r\n  open: boolean;\r\n  setClose: () => void;\r\n  title: string;\r\n  info: string;\r\n  buttonGroup?: React.ReactNode;\r\n}\r\n\r\nconst Modal: React.FC<ModalProps> = ({ open, setClose, title, info, buttonGroup }) => {\r\n  if (open)\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"fixed w-screen h-screen top-0 left-0 flex justify-center items-center\">\r\n          <div className=\"w-screen h-screen bg-black fixed top-0 left-0 opacity-70 z-40\" onClick={setClose}></div>\r\n          <div className=\"bg-white dark:bg-app-dark-4 p-8 rounded-md z-50 max-w-xl mx-5\">\r\n            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">{title}</h1>\r\n            <p className=\"text-gray-900 dark:text-white mt-8\">{info}</p>\r\n            <div className=\"w-auto text-right mt-6\">{buttonGroup}</div>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  return null;\r\n};\r\n\r\nexport default Modal;\r\n","import { Link, useParams } from \"react-router-dom\";\r\nimport InvoiceForm, { modes } from \"../components/InvoiceForm\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport InvoiceStatus from \"../components/InvoiceStatus\";\r\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\r\nimport moment from \"moment\";\r\n\r\nimport Button, { Modes } from \"../components/Button\";\r\nimport Page from \"../components/Page\";\r\nimport BottomButtonGroup from \"../components/BottomButtonGroup\";\r\nimport { fetchInvoiceItemData, deleteInvoiceItem, markAsPaid } from \"../store/invoice-action\";\r\nimport ItemList from \"../components/ItemList\";\r\nimport Modal from \"../components/Modal\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst InvoiceDetail = () => {\r\n  const history = useHistory();\r\n  const [showInvoiceForm, setShowInvoiceForm] = useState(false);\r\n  const [showDeleteModal, setshowDeleteModal] = useState(false);\r\n\r\n  const invoiceStoreItem = useAppSelector((state) => state.invoice.invoiceItem);\r\n  const { invoiceId } = useParams<{ invoiceId: string }>();\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    if (invoiceId) dispatch(fetchInvoiceItemData(invoiceId));\r\n  }, [dispatch, invoiceId]);\r\n\r\n  const MarkAsPaidHandler = () => {\r\n    const status = invoiceStoreItem?.status;\r\n    if (status === \"pending\" && invoiceId) {\r\n      dispatch(markAsPaid(invoiceId));\r\n      dispatch(fetchInvoiceItemData(invoiceId));\r\n    }\r\n  };\r\n\r\n  const reload = () => {\r\n    dispatch(fetchInvoiceItemData(invoiceId));\r\n  }\r\n\r\n  const confirmDeleteInvoiceItem = () => {\r\n    dispatch(deleteInvoiceItem(invoiceId));\r\n    history.replace(\"/invoices\");\r\n  };\r\n\r\n  const invoiceItem = invoiceStoreItem && invoiceStoreItem.id === invoiceId ? invoiceStoreItem : null;\r\n\r\n  const editButtonGroup = (\r\n    <React.Fragment>\r\n      <Button onClick={() => setShowInvoiceForm(true)} mode={Modes.Edit} />\r\n      <Button onClick={() => setshowDeleteModal(true)} mode={Modes.Delete} />\r\n      {invoiceItem?.status === \"pending\" && <Button onClick={MarkAsPaidHandler} mode={Modes.MarkAsPaid} />}\r\n    </React.Fragment>\r\n  );\r\n\r\n  const createDateString = invoiceItem ? moment(invoiceItem.createdAt).format(\"DD MMM YYYY\") : \"\";\r\n  const dueDateString = invoiceItem ? moment(invoiceItem.paymentDue).format(\"DD MMM YYYY\") : \"\";\r\n\r\n  const DeleteModalButtonGroup = (\r\n    <React.Fragment>\r\n      <Button onClick={() => setshowDeleteModal(false)} mode={Modes.Cancel} />\r\n      <Button onClick={confirmDeleteInvoiceItem} mode={Modes.Delete} />\r\n    </React.Fragment>\r\n  );\r\n\r\n  return (\r\n    <Page className=\"pb-16 sm:pb-0\">\r\n      <div className=\"container max-w-5xl pt-10 mx-auto\">\r\n        <Link to=\"/invoices\">\r\n          <button className=\"flex items-center mb-10\">\r\n            <img className=\"mr-5\" src={process.env.PUBLIC_URL + \"/assets/icon-arrow-left.svg\"} alt=\"icon-arrow-left\" />\r\n            <span className=\"text-gray-800 dark:text-white font-bold\">Go Back</span>\r\n          </button>\r\n        </Link>\r\n        {invoiceItem && (\r\n          <React.Fragment>\r\n            <div className=\"bg-white dark:bg-app-dark-3 rounded-md shadow-md p-5 mx-auto flex justify-between\">\r\n              <div className=\"flex items-center dark:text-gray-400\">\r\n                Status <InvoiceStatus status={invoiceItem.status} className=\"ml-3\" />\r\n              </div>\r\n              <div className=\"hidden sm:block\">{editButtonGroup}</div>\r\n            </div>\r\n\r\n            <div className=\"bg-white dark:bg-app-dark-3 rounded-md shadow-md p-5 mt-6 flex-col justify-between mb-10\">\r\n              <div className=\"grid grid-cols-2 justify-between items-center flex-1\">\r\n                <div className=\"mt-3 col-span-2 sm:col-span-1\">\r\n                  <div className=\"text-2xl dark:text-white\">\r\n                    #<span className=\" font-bold\">{invoiceItem.id}</span>\r\n                  </div>\r\n                  <p className=\"mt-2 text-gray-500\">{invoiceItem.description}</p>\r\n                </div>\r\n                <div className=\"mt-12 sm:mt-6 col-span-2 sm:col-span-1 flex sm:justify-end justify-start\">\r\n                  <div className=\"mr-5 text-gray-500\">\r\n                    <p>{invoiceItem.senderAddress.street}</p>\r\n                    <p>{invoiceItem.senderAddress.city}</p>\r\n                    <p>{invoiceItem.senderAddress.postCode}</p>\r\n                    <p>{invoiceItem.senderAddress.country}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"mt-6 grid grid-cols-2 sm:grid-cols-3\">\r\n                <div className=\"flex-1\">\r\n                  <div>\r\n                    <p className=\"text-md text-gray-500 dark:text-gray-200\">invoice Date</p>\r\n                    <p className=\"text-lg font-bold text-gray-800 dark:text-gray-200\">{createDateString}</p>\r\n                  </div>\r\n                  <div className=\"mt-10\">\r\n                    <p className=\"text-md text-gray-500 dark:text-gray-200\">Payment Due</p>\r\n                    <p className=\"text-lg font-bold text-gray-800 dark:text-gray-200\">{dueDateString}</p>\r\n                  </div>\r\n                </div>\r\n                <div className=\"flex-1\">\r\n                  <p className=\"text-md text-gray-500 dark:text-gray-200\">Bill To</p>\r\n                  <p className=\"text-lg font-bold text-gray-800 dark:text-gray-200\">{invoiceItem.clientName}</p>\r\n                  <p className=\"text-md text-gray-500 dark:text-gray-200\">{invoiceItem.clientAddress.street}</p>\r\n                  <p className=\"text-md text-gray-500 dark:text-gray-200\">{invoiceItem.clientAddress.city}</p>\r\n                  <p className=\"text-md text-gray-500 dark:text-gray-200\">{invoiceItem.clientAddress.postCode}</p>\r\n                  <p className=\"text-md text-gray-500 dark:text-gray-200\">{invoiceItem.clientAddress.country}</p>\r\n                </div>\r\n                <div className=\"flex-1.5 mt-10 sm:mt-0\">\r\n                  <p className=\"text-md text-gray-500 dark:text-gray-200\">Sent To</p>\r\n                  <p className=\"text-lg font-bold text-gray-800 dark:text-gray-200\">{invoiceItem.clientEmail}</p>\r\n                </div>\r\n              </div>\r\n\r\n              <ItemList itemList={invoiceItem.items} total={invoiceItem.total} />\r\n            </div>\r\n\r\n            <InvoiceForm show={showInvoiceForm} setShow={setShowInvoiceForm} mode={modes.EDIT} reload={reload}/>\r\n\r\n            <BottomButtonGroup>{editButtonGroup}</BottomButtonGroup>\r\n\r\n            <Modal\r\n              open={showDeleteModal}\r\n              setClose={() => setshowDeleteModal(false)}\r\n              title=\"Confirm Deletion\"\r\n              info={`Are you sure you want to delete invoice #${invoiceId}? This action cannot be undone.`}\r\n              buttonGroup={DeleteModalButtonGroup}\r\n            />\r\n          </React.Fragment>\r\n        )}\r\n      </div>\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default InvoiceDetail;\r\n","import React from \"react\";\r\n\r\ninterface SideBarProps {\r\n  toggleDarkModeHandler: () => void;\r\n}\r\n\r\nconst SideBar = ({ toggleDarkModeHandler }: SideBarProps) => {\r\n  return (\r\n    <div className=\"bg-green-200\">\r\n      <div className=\"hidden sm:flex flex-col w-20 h-screen absolute bg-app-dark-3 rounded-r-3xl overflow-hidden\">\r\n        <div className=\"flex-none flex justify-center items-center text-white bg-purple h-20\">\r\n          <img src={process.env.PUBLIC_URL + \"/assets/logo.svg\"} alt=\"logo\" />\r\n        </div>\r\n        <div className=\"flex-grow\"></div>\r\n        <div className=\"flex-none text-center text-white\">\r\n          <button onClick={toggleDarkModeHandler}>\r\n            <img className=\"block dark:hidden\" src={process.env.PUBLIC_URL + \"/assets/icon-moon.svg\"} alt=\"icon-moon\" />\r\n            <img className=\"hidden dark:block\" src={process.env.PUBLIC_URL + \"/assets/icon-sun.svg\"} alt=\"icon-sun\" />\r\n          </button>\r\n        </div>\r\n        <hr className=\"w-auto mx-1 my-4 border-purple-line\" />\r\n        <div className=\"flex-none flex justify-center\">\r\n          <img className=\"rounded-full w-10 mb-3\" src={process.env.PUBLIC_URL + \"/assets/image-avatar.jpg\"} alt=\"avatar\" />\r\n        </div>\r\n      </div>\r\n      {/* ------------------------------- */}\r\n      <div className=\"flex justify-between sm:hidden fixed top-0 w-screen bg-app-dark-3 h-16\">\r\n        <div className=\"flex-none flex justify-center items-center text-white bg-purple w-16\">\r\n          <img src={process.env.PUBLIC_URL + \"/assets/logo.svg\"} alt=\"logo\" />\r\n        </div>\r\n        <div className=\"flex h-auto items-center justify-center\">\r\n          <div className=\"flex-none text-center text-white my-0 mr-3 pr-3 border-r border-gray-600\">\r\n            <button onClick={toggleDarkModeHandler}>\r\n              <img className=\"block dark:hidden\" src={process.env.PUBLIC_URL + \"/assets/icon-moon.svg\"} alt=\"icon-moon\" />\r\n              <img className=\"hidden dark:block\" src={process.env.PUBLIC_URL + \"/assets/icon-sun.svg\"} alt=\"icon-sun\" />\r\n            </button>\r\n          </div>\r\n          <img className=\"rounded-full w-10 h-10 mr-3\" src={process.env.PUBLIC_URL + \"/assets/image-avatar.jpg\"} alt=\"avatar\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SideBar;\r\n","import { Switch, Route, Redirect } from \"react-router-dom\";\r\nimport Invoices from \"./pages/Invoices\";\r\nimport InvoiceDetail from \"./pages/InvoiceDetail\";\r\nimport SideBar from \"./components/SideBar\";\r\nimport { useState } from \"react\";\r\n\r\nfunction App() {\r\n  if (localStorage.getItem(\"theme\") === null) {\r\n    localStorage.setItem(\"theme\", \"light\");\r\n  }\r\n  const localTheme = localStorage.getItem(\"theme\");\r\n  const [theme, setTheme] = useState(localTheme);\r\n\r\n  const toggleDarkModeHandler = () => {\r\n    setTheme((current_theme: string | null) => {\r\n      let next_theme = \"light\";\r\n      if (current_theme === \"light\") next_theme = \"dark\";\r\n      localStorage.setItem(\"theme\", next_theme);\r\n      return next_theme;\r\n    });\r\n  };\r\n\r\n  const darkClass = theme === \"dark\" ? \" dark\" : \"\";\r\n\r\n  return (\r\n    <div className={\"containter \" + darkClass}>\r\n      <div className=\"bg-app-light dark:bg-app-dark-1 duration-500\">\r\n        <SideBar toggleDarkModeHandler={toggleDarkModeHandler} />\r\n        <div className=\"flex w-auto h-screen\">\r\n          <div className=\"sm:ml-20\"></div>\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <Redirect to=\"/invoices\" />\r\n            </Route>\r\n            <Route exact path=\"/invoices\">\r\n              <Invoices />\r\n            </Route>\r\n            <Route path=\"/invoices/:invoiceId\">\r\n              <InvoiceDetail />\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\n\nimport invoiceSlice from './invoice-slice';\n\nconst store = configureStore({\n  reducer: { invoice: invoiceSlice.reducer },\n});\n\nexport default store;\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { HashRouter } from \"react-router-dom\";\r\nimport \"./index.css\";\r\nimport store from \"./store\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <HashRouter>\r\n        <App />\r\n      </HashRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}